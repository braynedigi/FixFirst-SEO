version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: seo-audit-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-seo_audit}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - seo-audit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: seo-audit-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - seo-audit-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api.prod
      args:
        NODE_ENV: production
    container_name: seo-audit-api
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-seo_audit}?schema=public
      REDIS_URL: redis://redis:6379
      SOCKET_URL: http://api:3001
      FRONTEND_URL: ${FRONTEND_URL}
      JWT_SECRET: ${JWT_SECRET}
      PSI_API_KEY: ${PSI_API_KEY}
      NODE_ENV: production
      PORT: 3001
      # Email Configuration (Optional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@yourdomain.com}
    ports:
      - "${API_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - api_uploads:/app/apps/api/uploads
    networks:
      - seo-audit-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker.prod
      args:
        NODE_ENV: production
    container_name: seo-audit-worker
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-seo_audit}?schema=public
      REDIS_URL: redis://redis:6379
      SOCKET_URL: http://api:3001
      FRONTEND_URL: ${FRONTEND_URL}
      PSI_API_KEY: ${PSI_API_KEY}
      NODE_ENV: production
      # Email Configuration (Optional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@yourdomain.com}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - seo-audit-network

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web.prod
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NODE_ENV: production
    container_name: seo-audit-web
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: production
    ports:
      - "${WEB_PORT:-3005}:3000"
    depends_on:
      - api
    networks:
      - seo-audit-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  seo-audit-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  api_uploads:

