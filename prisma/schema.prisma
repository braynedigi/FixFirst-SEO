// Prisma schema for SEO Audit Tool

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  passwordHash            String    @map("password_hash")
  role                    Role      @default(USER)
  planTier                PlanTier  @default(FREE) @map("plan_tier")
  apiKeyHash              String?   @map("api_key_hash")
  apiKeyCreatedAt         DateTime? @map("api_key_created_at")
  notificationPreferences Json?     @map("notification_preferences")
  slackWebhookUrl         String?   @map("slack_webhook_url")
  twoFactorEnabled        Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret         String?   @map("two_factor_secret")
  twoFactorBackupCodes    String?   @map("two_factor_backup_codes") // JSON array of hashed codes
  paypalSubscriptionId    String?   @map("paypal_subscription_id")
  subscriptionStatus      SubscriptionStatus @default(INACTIVE) @map("subscription_status")
  subscriptionEndsAt      DateTime? @map("subscription_ends_at")
  trialEndsAt             DateTime? @map("trial_ends_at")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  
  projects                Project[]
  schedules               Schedule[]
  projectMembers          ProjectMember[]
  comments                Comment[]
  activities              Activity[]
  invitationsSent         Invitation[] @relation("InvitedBy")
  notifications           Notification[]
  notificationRules       NotificationRule[]
  subscriptions           Subscription[]
  invoices                Invoice[]
  chatConversations       ChatConversation[]
  
  @@map("users")
}

model Project {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  domain        String
  name          String
  isFavorite    Boolean   @default(false) @map("is_favorite")
  lastViewedAt  DateTime? @map("last_viewed_at")
  tags          Json      @default("[]")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  audits       Audit[]
  schedules    Schedule[]
  members      ProjectMember[]
  activities   Activity[]
  invitations  Invitation[]
  competitors  Competitor[]
  webhooks     Webhook[]
  notificationRules NotificationRule[]
  goals        Goal[]
  keywordGroups KeywordGroup[]
  keywords     Keyword[]
  backlinks    Backlink[]
  backlinkMonitors BacklinkMonitor[]
  chatConversations ChatConversation[]
  
  @@unique([userId, domain], name: "userId_domain")
  @@index([userId])
  @@map("projects")
}

model Audit {
  id                   String       @id @default(cuid())
  projectId            String       @map("project_id")
  url                  String
  status               AuditStatus  @default(QUEUED)
  totalScore           Int?         @map("total_score")
  technicalScore       Int?         @map("technical_score")
  onPageScore          Int?         @map("on_page_score")
  structuredDataScore  Int?         @map("structured_data_score")
  performanceScore     Int?         @map("performance_score")
  localSeoScore        Int?         @map("local_seo_score")
  psiData              Json?        @map("psi_data")
  startedAt            DateTime     @default(now()) @map("started_at")
  completedAt          DateTime?    @map("completed_at")
  metadata             Json         @default("{}")
  retryCount           Int          @default(0) @map("retry_count")
  maxRetries           Int          @default(3) @map("max_retries")
  errorMessage         String?      @map("error_message") @db.Text
  
  project              Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  pages                Page[]
  issues               Issue[]
  
  @@index([projectId])
  @@index([status])
  @@map("audits")
}

model Page {
  id           String    @id @default(cuid())
  auditId      String    @map("audit_id")
  url          String
  statusCode   Int       @map("status_code")
  crawledAt    DateTime  @default(now()) @map("crawled_at")
  htmlSnapshot String?   @map("html_snapshot") @db.Text
  loadTime     Int?      @map("load_time")
  pageSize     Int?      @map("page_size")
  
  audit        Audit     @relation(fields: [auditId], references: [id], onDelete: Cascade)
  issues       Issue[]
  
  @@index([auditId])
  @@map("pages")
}

model Issue {
  id             String         @id @default(cuid())
  auditId        String         @map("audit_id")
  pageId         String?        @map("page_id")
  ruleId         String         @map("rule_id")
  severity       IssueSeverity
  message        String
  recommendation String         @db.Text
  metadata       Json           @default("{}")
  createdAt      DateTime       @default(now()) @map("created_at")
  
  audit          Audit          @relation(fields: [auditId], references: [id], onDelete: Cascade)
  page           Page?          @relation(fields: [pageId], references: [id], onDelete: Cascade)
  rule           Rule           @relation(fields: [ruleId], references: [id])
  comments       Comment[]
  
  @@index([auditId])
  @@index([ruleId])
  @@map("issues")
}

model Rule {
  id          String        @id @default(cuid())
  category    RuleCategory
  name        String
  description String        @db.Text
  weight      Int
  isActive    Boolean       @default(true) @map("is_active")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  issues      Issue[]
  
  @@index([category])
  @@map("rules")
}

enum Role {
  USER
  ADMIN
}

enum PlanTier {
  FREE
  PRO
  AGENCY
}

enum AuditStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
}

enum IssueSeverity {
  CRITICAL
  WARNING
  INFO
}

enum RuleCategory {
  TECHNICAL
  ONPAGE
  STRUCTURED_DATA
  PERFORMANCE
  LOCAL_SEO
}

model Settings {
  id              String   @id @default("branding")
  appName         String   @default("FixFirst SEO") @map("app_name")
  logoUrl         String?  @map("logo_url")
  faviconUrl      String?  @map("favicon_url")
  primaryColor    String   @default("#06b6d4") @map("primary_color")
  accentColor     String   @default("#10b981") @map("accent_color")
  footerText      String   @default("Â© 2025 FixFirst SEO. Powered By Brayne Smart Solutions Corp.") @map("footer_text")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("settings")
}

model Schedule {
  id              String          @id @default(cuid())
  userId          String          @map("user_id")
  projectId       String          @map("project_id")
  url             String
  frequency       ScheduleFrequency
  isActive        Boolean         @default(true) @map("is_active")
  lastRunAt       DateTime?       @map("last_run_at")
  nextRunAt       DateTime        @map("next_run_at")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([projectId])
  @@index([nextRunAt])
  @@map("schedules")
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

// Team Collaboration Models

model ProjectMember {
  id           String           @id @default(cuid())
  projectId    String           @map("project_id")
  userId       String           @map("user_id")
  role         ProjectRole      @default(MEMBER)
  invitedBy    String?          @map("invited_by")
  joinedAt     DateTime         @default(now()) @map("joined_at")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  
  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

model Comment {
  id           String           @id @default(cuid())
  issueId      String           @map("issue_id")
  userId       String           @map("user_id")
  content      String           @db.Text
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  
  issue        Issue            @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([issueId])
  @@index([userId])
  @@map("comments")
}

model Activity {
  id           String           @id @default(cuid())
  projectId    String           @map("project_id")
  userId       String           @map("user_id")
  action       ActivityAction
  entityType   String           @map("entity_type")
  entityId     String           @map("entity_id")
  metadata     Json             @default("{}")
  createdAt    DateTime         @default(now()) @map("created_at")
  
  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([userId])
  @@index([createdAt])
  @@map("activities")
}

model Invitation {
  id           String           @id @default(cuid())
  projectId    String           @map("project_id")
  email        String
  role         ProjectRole      @default(MEMBER)
  token        String           @unique
  invitedBy    String           @map("invited_by")
  status       InvitationStatus @default(PENDING)
  expiresAt    DateTime         @map("expires_at")
  acceptedAt   DateTime?        @map("accepted_at")
  createdAt    DateTime         @default(now()) @map("created_at")
  
  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  inviter      User             @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([email])
  @@index([token])
  @@map("invitations")
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ActivityAction {
  CREATED
  UPDATED
  DELETED
  INVITED
  JOINED
  LEFT
  COMMENTED
  COMPLETED
  STARTED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

// Analytics & Insights Models

model Competitor {
  id              String              @id @default(cuid())
  projectId       String              @map("project_id")
  name            String
  domain          String
  isActive        Boolean             @default(true) @map("is_active")
  lastAuditedAt   DateTime?           @map("last_audited_at")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  
  project         Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  snapshots       CompetitorSnapshot[]
  comparisons     CompetitorComparison[]
  
  @@unique([projectId, domain])
  @@index([projectId])
  @@map("competitors")
}

model CompetitorSnapshot {
  id                   String    @id @default(cuid())
  competitorId         String    @map("competitor_id")
  totalScore           Int       @map("total_score")
  technicalScore       Int       @map("technical_score")
  onPageScore          Int       @map("on_page_score")
  structuredDataScore  Int       @map("structured_data_score")
  performanceScore     Int       @map("performance_score")
  localSeoScore        Int       @map("local_seo_score")
  metadata             Json      @default("{}")
  capturedAt           DateTime  @default(now()) @map("captured_at")
  
  competitor           Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  
  @@index([competitorId])
  @@index([capturedAt])
  @@map("competitor_snapshots")
}

model CompetitorComparison {
  id              String    @id @default(cuid())
  projectId       String    @map("project_id")
  competitorId    String    @map("competitor_id")
  auditId         String    @map("audit_id")
  scoreDelta      Int       @map("score_delta")
  insights        Json      @default("[]")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  competitor      Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([competitorId])
  @@index([auditId])
  @@map("competitor_comparisons")
}

model Recommendation {
  id              String                @id @default(cuid())
  auditId         String                @map("audit_id")
  category        RecommendationCategory
  priority        RecommendationPriority
  title           String
  description     String                @db.Text
  impact          String                @db.Text
  effort          String
  estimatedValue  Int                   @map("estimated_value")
  isImplemented   Boolean               @default(false) @map("is_implemented")
  implementedAt   DateTime?             @map("implemented_at")
  metadata        Json                  @default("{}")
  createdAt       DateTime              @default(now()) @map("created_at")
  
  @@index([auditId])
  @@index([category])
  @@index([priority])
  @@map("recommendations")
}

model AuditSnapshot {
  id                   String    @id @default(cuid())
  auditId              String    @map("audit_id")
  projectId            String    @map("project_id")
  totalScore           Int       @map("total_score")
  technicalScore       Int       @map("technical_score")
  onPageScore          Int       @map("on_page_score")
  structuredDataScore  Int       @map("structured_data_score")
  performanceScore     Int       @map("performance_score")
  localSeoScore        Int       @map("local_seo_score")
  issueCount           Int       @map("issue_count")
  criticalIssues       Int       @map("critical_issues")
  warningIssues        Int       @map("warning_issues")
  infoIssues           Int       @map("info_issues")
  metadata             Json      @default("{}")
  capturedAt           DateTime  @default(now()) @map("captured_at")
  
  @@index([auditId])
  @@index([projectId])
  @@index([capturedAt])
  @@map("audit_snapshots")
}

model Goal {
  id            String       @id @default(cuid())
  projectId     String       @map("project_id")
  name          String
  targetScore   Int          @map("target_score")
  category      GoalCategory @default(OVERALL)
  deadline      DateTime?
  achieved      Boolean      @default(false)
  achievedAt    DateTime?    @map("achieved_at")
  achievedScore Int?         @map("achieved_score")
  description   String?      @db.Text
  metadata      Json         @default("{}")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([achieved])
  @@index([deadline])
  @@map("goals")
}

enum GoalCategory {
  OVERALL
  PERFORMANCE
  TECHNICAL
  ON_PAGE
  STRUCTURED_DATA
  LOCAL_SEO
}

// Keyword Tracking Models
model KeywordGroup {
  id          String    @id @default(cuid())
  projectId   String    @map("project_id")
  name        String
  color       String?   // Hex color for UI grouping
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  keywords    Keyword[]
  
  @@index([projectId])
  @@map("keyword_groups")
}

model Keyword {
  id              String         @id @default(cuid())
  projectId       String         @map("project_id")
  groupId         String?        @map("group_id")
  keyword         String
  targetUrl       String?        @map("target_url") // Expected landing page
  device          KeywordDevice  @default(DESKTOP)
  location        String         @default("US") // Country code
  language        String         @default("en") // Language code
  searchVolume    Int?           @map("search_volume") // Monthly search volume (from GSC or paid API)
  difficulty      Int?           // Keyword difficulty 0-100 (from paid API)
  currentPosition Int?           @map("current_position") // Latest position
  previousPosition Int?          @map("previous_position") // Previous check position
  bestPosition    Int?           @map("best_position") // Best position ever achieved
  worstPosition   Int?           @map("worst_position") // Worst position recorded
  averagePosition Float?         @map("average_position") // Average position
  isTracking      Boolean        @default(true) @map("is_tracking") // Pause/resume tracking
  metadata        Json           @default("{}")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  
  project         Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  group           KeywordGroup?  @relation(fields: [groupId], references: [id], onDelete: SetNull)
  rankings        KeywordRanking[]
  
  @@unique([projectId, keyword, device, location])
  @@index([projectId])
  @@index([groupId])
  @@index([isTracking])
  @@map("keywords")
}

model KeywordRanking {
  id              String    @id @default(cuid())
  keywordId       String    @map("keyword_id")
  position        Int?      // Null if not ranking in top 100
  url             String?   // Actual URL ranking
  impressions     Int?      // From GSC
  clicks          Int?      // From GSC
  ctr             Float?    // Click-through rate
  serpFeatures    Json?     @map("serp_features") // Featured snippet, PAA, etc.
  competitorUrls  Json?     @map("competitor_urls") // Top 10 URLs from SERP
  capturedAt      DateTime  @default(now()) @map("captured_at")
  
  keyword         Keyword   @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  
  @@index([keywordId])
  @@index([capturedAt])
  @@map("keyword_rankings")
}

enum KeywordDevice {
  DESKTOP
  MOBILE
  TABLET
}

enum RecommendationCategory {
  QUICK_WIN
  TECHNICAL_IMPROVEMENT
  CONTENT_OPTIMIZATION
  PERFORMANCE_BOOST
  STRUCTURED_DATA
  MOBILE_OPTIMIZATION
  LOCAL_SEO
  SECURITY
}

enum RecommendationPriority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String?
  description String?
  isSecret    Boolean  @default(false) @map("is_secret")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedBy   String?  @map("updated_by")
  
  @@map("system_settings")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  key         String   @unique // audit-complete, invitation, weekly-digest
  name        String
  subject     String
  htmlContent String   @map("html_content") @db.Text
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedBy   String?  @map("updated_by")
  
  @@map("email_templates")
}

model Webhook {
  id          String   @id @default(cuid())
  projectId   String?  @map("project_id")
  url         String
  events      String[] // ['audit.completed', 'audit.failed', etc.]
  enabled     Boolean  @default(true)
  secret      String?  // For signature verification
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map("webhooks")
}

model Notification {
  id          String             @id @default(cuid())
  userId      String             @map("user_id")
  type        NotificationType
  title       String
  message     String             @db.Text
  actionUrl   String?            @map("action_url")
  status      NotificationStatus @default(UNREAD)
  priority    NotificationPriority @default(NORMAL)
  metadata    Json               @default("{}")
  readAt      DateTime?          @map("read_at")
  createdAt   DateTime           @default(now()) @map("created_at")
  
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationRule {
  id          String              @id @default(cuid())
  userId      String              @map("user_id")
  projectId   String?             @map("project_id")
  name        String
  event       String              // Event to trigger on
  conditions  Json                // Conditions to check
  channels    NotificationChannel[] // How to notify
  enabled     Boolean             @default(true)
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([projectId])
  @@index([event])
  @@map("notification_rules")
}

enum NotificationType {
  AUDIT_COMPLETED
  AUDIT_FAILED
  ISSUE_DETECTED
  SCORE_IMPROVED
  SCORE_DECLINED
  INVITATION_RECEIVED
  MEMBER_JOINED
  COMMENT_ADDED
  SYSTEM_ALERT
  RECOMMENDATION_AVAILABLE
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SLACK
  WEBHOOK
}

model Subscription {
  id                String             @id @default(cuid())
  userId            String             @map("user_id")
  planTier          PlanTier           @map("plan_tier")
  status            SubscriptionStatus
  paypalSubscriptionId String?         @map("paypal_subscription_id")
  paypalPlanId      String?            @map("paypal_plan_id")
  amount            Float              // Monthly amount in USD
  currency          String             @default("USD")
  billingCycle      String             @default("MONTHLY") // MONTHLY, YEARLY
  startDate         DateTime           @map("start_date")
  endDate           DateTime?          @map("end_date")
  canceledAt        DateTime?          @map("canceled_at")
  metadata          Json               @default("{}")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@map("subscriptions")
}

model Invoice {
  id                String        @id @default(cuid())
  userId            String        @map("user_id")
  subscriptionId    String?       @map("subscription_id")
  paypalInvoiceId   String?       @map("paypal_invoice_id")
  amount            Float
  currency          String        @default("USD")
  status            InvoiceStatus
  description       String?       @db.Text
  invoiceUrl        String?       @map("invoice_url")
  paidAt            DateTime?     @map("paid_at")
  dueDate           DateTime?     @map("due_date")
  metadata          Json          @default("{}")
  createdAt         DateTime      @default(now()) @map("created_at")
  
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@map("invoices")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
  TRIAL
  SUSPENDED
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  FAILED
  CANCELLED
}

model Backlink {
  id              String         @id @default(cuid())
  projectId       String         @map("project_id")
  sourceUrl       String         @map("source_url") // URL of the page linking to you
  sourceDomain    String         @map("source_domain") // Domain of the linking site
  targetUrl       String         @map("target_url") // Your page being linked to
  anchorText      String?        @map("anchor_text") // Link anchor text
  rel             String?        // nofollow, dofollow, ugc, sponsored
  type            BacklinkType   @default(EXTERNAL)
  status          BacklinkStatus @default(ACTIVE)
  domainAuthority Int?           @map("domain_authority") // 0-100
  pageAuthority   Int?           @map("page_authority") // 0-100
  spamScore       Int?           @map("spam_score") // 0-100
  firstSeen       DateTime       @default(now()) @map("first_seen")
  lastSeen        DateTime       @default(now()) @map("last_seen")
  lastChecked     DateTime       @default(now()) @map("last_checked")
  metadata        Json           @default("{}")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  
  project         Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([sourceDomain])
  @@index([status])
  @@index([lastChecked])
  @@map("backlinks")
}

model BacklinkMonitor {
  id              String    @id @default(cuid())
  projectId       String    @map("project_id")
  name            String
  targetUrl       String    @map("target_url") // URL to monitor backlinks for
  enabled         Boolean   @default(true)
  checkFrequency  String    @default("daily") @map("check_frequency") // daily, weekly, monthly
  lastChecked     DateTime? @map("last_checked")
  totalBacklinks  Int       @default(0) @map("total_backlinks")
  newBacklinks    Int       @default(0) @map("new_backlinks") // Since last check
  lostBacklinks   Int       @default(0) @map("lost_backlinks") // Since last check
  metadata        Json      @default("{}")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([enabled])
  @@map("backlink_monitors")
}

enum BacklinkType {
  EXTERNAL    // From external domain
  INTERNAL    // From same domain
  REDIRECT    // Via redirect
}

enum BacklinkStatus {
  ACTIVE      // Link is currently live
  LOST        // Link was removed
  BROKEN      // Link leads to 404/error
  NOFOLLOW    // Changed to nofollow
}

model ChatConversation {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  projectId   String?       @map("project_id")
  title       String        @default("New Conversation")
  context     Json?         // Store relevant context (audit data, project info, etc.)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  messages    ChatMessage[]
  
  @@index([userId])
  @@index([projectId])
  @@map("chat_conversations")
}

model ChatMessage {
  id              String           @id @default(cuid())
  conversationId  String           @map("conversation_id")
  role            ChatRole
  content         String           @db.Text
  metadata        Json?            // Store additional data like tokens, model used, etc.
  createdAt       DateTime         @default(now()) @map("created_at")
  
  conversation    ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@map("chat_messages")
}

enum ChatRole {
  USER
  ASSISTANT
  SYSTEM
}

